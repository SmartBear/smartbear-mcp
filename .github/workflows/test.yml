name: Test Suite

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20, 22]

    name: Test on Node.js ${{ matrix.node-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v3.6.0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
        if: matrix.node-version == 22 # Only upload coverage from one Node version
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == 22
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Try to read coverage summary
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                const nodeVersion = '${{ matrix.node-version }}';

                const comment = [
                  "## üìä Test Coverage Report",
                  "",
                  "| Metric | Coverage | Threshold |",
                  "|--------|----------|-----------|",
                  `| Lines | ${total.lines.pct}% | 80% |`,
                  `| Functions | ${total.functions.pct}% | 80% |`,
                  `| Branches | ${total.branches.pct}% | 80% |`,
                  `| Statements | ${total.statements.pct}% | 80% |`,
                  "",
                  `Coverage report generated on Node.js ${nodeVersion} ‚úÖ`
                ].join('\n');

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not read coverage report:', error.message);
            }

  test-results:
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          elif [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed"
          else
            echo "‚ö†Ô∏è Tests completed with status: ${{ needs.test.result }}"
          fi
