name: Test Suite

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20, 22]

    name: Test on Node.js ${{ matrix.node-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: |
          npm run test:coverage
          # Generate coverage badge data
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const pct = coverage.total.lines.pct;
            const color = pct >= 80 ? 'brightgreen' : pct >= 60 ? 'yellow' : 'red';
            const badge = {
              schemaVersion: 1,
              label: 'coverage',
              message: pct.toFixed(1) + '%',
              color: color
            };
            fs.writeFileSync('coverage/badge.json', JSON.stringify(badge, null, 2));
            console.log('Coverage badge generated:', pct.toFixed(1) + '%');
          "

      - name: Upload coverage reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: matrix.node-version == 22 # Only upload coverage from one Node version
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: |
            coverage/
            !coverage/**/*.tmp
          retention-days: 30

      - name: Upload coverage to GitHub Pages (if main branch)
        if: github.ref == 'refs/heads/main' && matrix.node-version == 22
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: coverage/

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == 22
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Helper functions
            function getStatusIcon(pct, threshold = 80) {
              if (pct >= threshold) return '‚úÖ';
              if (pct >= threshold * 0.75) return '‚ö†Ô∏è';
              return '‚ùå';
            }

            function formatPercentage(pct) {
              return `${pct.toFixed(1)}%`;
            }

            function getTopUncoveredFiles(coverage, limit = 5) {
              const files = Object.entries(coverage)
                .filter(([key]) => key !== 'total')
                .map(([file, data]) => ({
                  file: file.replace(process.cwd() + '/', ''),
                  lines: data.lines.pct
                }))
                .filter(item => item.lines < 100)
                .sort((a, b) => a.lines - b.lines)
                .slice(0, limit);

              return files;
            }            // Try to read coverage summary
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');

              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                const nodeVersion = '${{ matrix.node-version }}';
                const threshold = 80;

                // Calculate overall status
                const overallPass = total.lines.pct >= threshold;
                const statusIcon = overallPass ? 'üéØ' : 'üìä';
                const statusText = overallPass ? 'Coverage Target Met!' : 'Coverage Report';

                // Get top uncovered files
                const uncoveredFiles = getTopUncoveredFiles(coverage);

                let comment = [
                  `## ${statusIcon} ${statusText}`,
                  "",
                  "### üìà Coverage Metrics",
                  "",
                  "| Metric | Coverage | Target | Status |",
                  "|--------|----------|--------|--------|",
                  `| **Lines** | **${formatPercentage(total.lines.pct)}** | ${threshold}% | ${getStatusIcon(total.lines.pct, threshold)} |`,
                  `| **Functions** | **${formatPercentage(total.functions.pct)}** | ${threshold}% | ${getStatusIcon(total.functions.pct, threshold)} |`,
                  `| **Branches** | **${formatPercentage(total.branches.pct)}** | ${threshold}% | ${getStatusIcon(total.branches.pct, threshold)} |`,
                  `| **Statements** | **${formatPercentage(total.statements.pct)}** | ${threshold}% | ${getStatusIcon(total.statements.pct, threshold)} |`,
                  "",
                  "### üìä Test Statistics",
                  "",
                  `- **Total Lines:** ${total.lines.covered.toLocaleString()} / ${total.lines.total.toLocaleString()}`,
                  `- **Total Functions:** ${total.functions.covered} / ${total.functions.total}`,
                  `- **Total Branches:** ${total.branches.covered} / ${total.branches.total}`,
                ];

                // Add uncovered files section if there are any
                if (uncoveredFiles.length > 0) {
                  comment.push(
                    "",
                    "### üîç Files Needing Coverage",
                    "",
                    "| File | Coverage |",
                    "|------|----------|"
                  );

                  uncoveredFiles.forEach(item => {
                    comment.push(`| \`${item.file}\` | ${formatPercentage(item.lines)} |`);
                  });
                }

                // Add footer with links
                const isMainBranch = context.ref === 'refs/heads/main';
                const workflowLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`;
                const pagesLink = `https://${context.repo.owner.toLowerCase()}.github.io/${context.repo.repo}/`;

                let footerLinks = `[View workflow](${workflowLink})`;
                if (isMainBranch) {
                  footerLinks += ` ‚Ä¢ [Coverage report](${pagesLink})`;
                }

                comment.push(
                  "",
                  "---",
                  `üìù Report generated on Node.js ${nodeVersion} ‚Ä¢ ${footerLinks} ‚Ä¢ Coverage by Vitest + v8`
                );

                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment.join('\n')
                });
              }
            } catch (error) {
              console.log('Could not read coverage report:', error.message);

              // Post a fallback comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Coverage Report Failed**\n\nCould not generate coverage report: ${error.message}\n\nPlease check the [workflow logs](../actions) for more details.`
              });
            }

  test-results:
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          elif [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed"
          else
            echo "‚ö†Ô∏è Tests completed with status: ${{ needs.test.result }}"
          fi

  # Deploy coverage report to GitHub Pages (main branch only)
  deploy-coverage:
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0

      - name: Download coverage artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: coverage-report-node-22
          path: coverage/

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: coverage/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5
